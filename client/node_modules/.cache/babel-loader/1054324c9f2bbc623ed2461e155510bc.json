{"ast":null,"code":"var _jsxFileName = \"D:\\\\laptop-shop-v.1\\\\client\\\\src\\\\components\\\\Filter\\\\Filter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Filter.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { changeFilterCheckedState, getAllProducts, getProductsByMultyFilter } from \"../../actions/productsActions\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DESKTOP_GLOBAL_FILTER_STATE = {};\nlet GLOBAL_SORT_VALUE_STATE = \"a-z\";\n\nfunction Filter({\n  show,\n  name,\n  data\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const [activeFilterBody, setActiveFilterBody] = useState(show);\n\n  if (Object.keys(DESKTOP_GLOBAL_FILTER_STATE).length === 0) {\n    localStorage.removeItem(\"desktop_filters\");\n  }\n\n  const getCheckboxValue = () => {\n    var _DESKTOP_GLOBAL_FILTE;\n\n    const lowName = name === null || name === void 0 ? void 0 : name.toLowerCase();\n    let newFilterState = {};\n    newFilterState.brand = getFilterValue(document.getElementsByClassName(\"BRAND\")).newList;\n    newFilterState.processor = getFilterValue(document.getElementsByClassName(\"PROCESSOR\")).newList;\n    newFilterState.memory = getFilterValue(document.getElementsByClassName(\"MEMORY\")).newList;\n    newFilterState.storage = getFilterValue(document.getElementsByClassName(\"STORAGE\")).newList;\n    newFilterState.video = getFilterValue(document.getElementsByClassName(\"VIDEO\")).newList;\n\n    if (localStorage.getItem(\"sort\")) {\n      GLOBAL_SORT_VALUE_STATE = localStorage.getItem(\"sort\");\n    }\n\n    DESKTOP_GLOBAL_FILTER_STATE[lowName] = getFilterValue(document.getElementsByClassName(`${name}`)).value;\n\n    if (((_DESKTOP_GLOBAL_FILTE = DESKTOP_GLOBAL_FILTER_STATE[lowName]) === null || _DESKTOP_GLOBAL_FILTE === void 0 ? void 0 : _DESKTOP_GLOBAL_FILTE.length) === 0) {\n      delete DESKTOP_GLOBAL_FILTER_STATE[lowName];\n    }\n\n    localStorage.setItem(\"active-filters\", JSON.stringify({\n      name: list\n    }));\n    dispatch(getProductsByMultyFilter(DESKTOP_GLOBAL_FILTER_STATE, GLOBAL_SORT_VALUE_STATE));\n    dispatch(changeFilterCheckedState({\n      data: newFilterState\n    }));\n    localStorage.setItem(\"desktop_filters\", \"active\");\n  };\n\n  const changeActiveFilterState = () => {\n    setActiveFilterBody(!activeFilterBody);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filter\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => changeActiveFilterState(),\n        className: \"filter-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), activeFilterBody ? /*#__PURE__*/_jsxDEV(ExpandLessIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 31\n        }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `filter-body ${activeFilterBody ? \"f-active\" : \"\"}`,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: data === null || data === void 0 ? void 0 : data.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: item.name,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: item.name,\n                defaultValue: item.name,\n                className: `${name}`,\n                onClick: () => getCheckboxValue(),\n                defaultChecked: item.isChecked\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Filter, \"9xoxBXI356Ms3SJoKfwSRSz6IwI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Filter;\n\nconst getFilterValue = list => {\n  let value = [];\n  let newList = [];\n\n  if (list) {\n    for (let i of list) {\n      newList.push({\n        name: i.defaultValue,\n        isChecked: i.checked\n      });\n\n      if (i.checked === true) {\n        value.push(i.value);\n      }\n    }\n  }\n\n  return {\n    value: value,\n    newList: newList\n  };\n};\n\nexport default Filter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Filter\");","map":{"version":3,"sources":["D:/laptop-shop-v.1/client/src/components/Filter/Filter.js"],"names":["React","useEffect","useState","useDispatch","changeFilterCheckedState","getAllProducts","getProductsByMultyFilter","ExpandLessIcon","ExpandMoreIcon","DESKTOP_GLOBAL_FILTER_STATE","GLOBAL_SORT_VALUE_STATE","Filter","show","name","data","dispatch","activeFilterBody","setActiveFilterBody","Object","keys","length","localStorage","removeItem","getCheckboxValue","lowName","toLowerCase","newFilterState","brand","getFilterValue","document","getElementsByClassName","newList","processor","memory","storage","video","getItem","value","setItem","JSON","stringify","list","changeActiveFilterState","map","item","index","isChecked","i","push","defaultValue","checked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Filter.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  changeFilterCheckedState,\r\n  getAllProducts,\r\n  getProductsByMultyFilter,\r\n} from \"../../actions/productsActions\";\r\n\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nlet DESKTOP_GLOBAL_FILTER_STATE = {};\r\nlet GLOBAL_SORT_VALUE_STATE = \"a-z\";\r\n\r\nfunction Filter({ show, name, data }) {\r\n  const dispatch = useDispatch();\r\n  const [activeFilterBody, setActiveFilterBody] = useState(show);\r\n\r\n  if (Object.keys(DESKTOP_GLOBAL_FILTER_STATE).length === 0) {\r\n    localStorage.removeItem(\"desktop_filters\");\r\n  }\r\n\r\n  const getCheckboxValue = () => {\r\n    const lowName = name?.toLowerCase();\r\n    let newFilterState = {};\r\n\r\n    newFilterState.brand = getFilterValue(\r\n      document.getElementsByClassName(\"BRAND\")\r\n    ).newList;\r\n    newFilterState.processor = getFilterValue(\r\n      document.getElementsByClassName(\"PROCESSOR\")\r\n    ).newList;\r\n    newFilterState.memory = getFilterValue(\r\n      document.getElementsByClassName(\"MEMORY\")\r\n    ).newList;\r\n    newFilterState.storage = getFilterValue(\r\n      document.getElementsByClassName(\"STORAGE\")\r\n    ).newList;\r\n    newFilterState.video = getFilterValue(\r\n      document.getElementsByClassName(\"VIDEO\")\r\n    ).newList;\r\n\r\n    if (localStorage.getItem(\"sort\")) {\r\n      GLOBAL_SORT_VALUE_STATE = localStorage.getItem(\"sort\");\r\n    }\r\n\r\n    DESKTOP_GLOBAL_FILTER_STATE[lowName] = getFilterValue(\r\n      document.getElementsByClassName(`${name}`)\r\n    ).value;\r\n\r\n    if (DESKTOP_GLOBAL_FILTER_STATE[lowName]?.length === 0) {\r\n      delete DESKTOP_GLOBAL_FILTER_STATE[lowName];\r\n    }\r\n\r\n    localStorage.setItem(\"active-filters\", JSON.stringify({ name: list }));\r\n\r\n    dispatch(\r\n      getProductsByMultyFilter(\r\n        DESKTOP_GLOBAL_FILTER_STATE,\r\n        GLOBAL_SORT_VALUE_STATE\r\n      )\r\n    );\r\n    dispatch(changeFilterCheckedState({ data: newFilterState }));\r\n    localStorage.setItem(\"desktop_filters\", \"active\");\r\n  };\r\n\r\n  const changeActiveFilterState = () => {\r\n    setActiveFilterBody(!activeFilterBody);\r\n  };\r\n\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"filter-container\">\r\n        <div\r\n          onClick={() => changeActiveFilterState()}\r\n          className=\"filter-header\"\r\n        >\r\n          <h3>{name}</h3>\r\n          {activeFilterBody ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n        </div>\r\n        <div className={`filter-body ${activeFilterBody ? \"f-active\" : \"\"}`}>\r\n          <ul>\r\n            {data?.map((item, index) => (\r\n              <li key={index}>\r\n                <label htmlFor={item.name}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={item.name}\r\n                    defaultValue={item.name}\r\n                    className={`${name}`}\r\n                    onClick={() => getCheckboxValue()}\r\n                    defaultChecked={item.isChecked}\r\n                  />\r\n                  <span>{item.name}</span>\r\n                </label>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst getFilterValue = (list) => {\r\n  let value = [];\r\n  let newList = [];\r\n  if (list) {\r\n    for (let i of list) {\r\n      newList.push({ name: i.defaultValue, isChecked: i.checked });\r\n      if (i.checked === true) {\r\n        value.push(i.value);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    value: value,\r\n    newList: newList,\r\n  };\r\n};\r\n\r\nexport default Filter;\r\n"]},"metadata":{},"sourceType":"module"}