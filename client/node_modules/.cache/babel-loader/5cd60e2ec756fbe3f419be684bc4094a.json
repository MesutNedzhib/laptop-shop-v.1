{"ast":null,"code":"import { ADD_TO_CART, CHANGE_CART_ITEM_QUANTITY, EMPTY_CART, REMOVE_FROM_CART_BY_ID } from \"../constants/cartConstants\";\nexport const cartReducer = (state = {\n  cartItems: []\n}, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      let addedItem = state.cartItems.find(c => c._id === action.payload._id);\n\n      if (addedItem) {\n        let newState = state.cartItems.map(cartItems => {\n          if (cartItems.quantity === cartItems.countInStock) {\n            return cartItems;\n          }\n\n          if (cartItems._id === action.payload._id) {\n            return Object.assign({}, addedItem, {\n              quantity: addedItem.quantity + 1\n            });\n          }\n\n          return cartItems;\n        });\n        return { ...state,\n          cartItems: newState\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, action.payload]\n        };\n      }\n\n    case REMOVE_FROM_CART_BY_ID:\n      let newState = state.cartItems.filter(cartItem => cartItem._id !== action.payload._id);\n      return { ...state,\n        cartItems: newState\n      };\n\n    case CHANGE_CART_ITEM_QUANTITY:\n      let changeAddedItem = state.cartItems.find(c => c._id === action.payload._id);\n\n      if (changeAddedItem) {\n        let newState = state.cartItems.map(cartItems => {\n          if (cartItems._id === action.payload._id) {\n            return Object.assign({}, changeAddedItem, {\n              quantity: changeAddedItem.quantity = action.payload.quantity\n            });\n          }\n\n          return cartItems;\n        });\n        return { ...state,\n          cartItems: newState\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, action.payload]\n        };\n      }\n\n    case EMPTY_CART:\n      return { ...state,\n        cartItems: []\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/laptop-shop-v.1/client/src/reducers/cartReducer.js"],"names":["ADD_TO_CART","CHANGE_CART_ITEM_QUANTITY","EMPTY_CART","REMOVE_FROM_CART_BY_ID","cartReducer","state","cartItems","action","type","addedItem","find","c","_id","payload","newState","map","quantity","countInStock","Object","assign","filter","cartItem","changeAddedItem"],"mappings":"AAAA,SACEA,WADF,EAEEC,yBAFF,EAGEC,UAHF,EAIEC,sBAJF,QAKO,4BALP;AAOA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAT,EAA4BC,MAA5B,KAAuC;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,UAAIS,SAAS,GAAGJ,KAAK,CAACC,SAAN,CAAgBI,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUL,MAAM,CAACM,OAAP,CAAeD,GAArD,CAAhB;;AAEA,UAAIH,SAAJ,EAAe;AACb,YAAIK,QAAQ,GAAGT,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAqBT,SAAD,IAAe;AAChD,cAAIA,SAAS,CAACU,QAAV,KAAuBV,SAAS,CAACW,YAArC,EAAmD;AACjD,mBAAOX,SAAP;AACD;;AACD,cAAIA,SAAS,CAACM,GAAV,KAAkBL,MAAM,CAACM,OAAP,CAAeD,GAArC,EAA0C;AACxC,mBAAOM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,SAAlB,EAA6B;AAClCO,cAAAA,QAAQ,EAAEP,SAAS,CAACO,QAAV,GAAqB;AADG,aAA7B,CAAP;AAGD;;AACD,iBAAOV,SAAP;AACD,SAVc,CAAf;AAWA,eAAO,EAAE,GAAGD,KAAL;AAAYC,UAAAA,SAAS,EAAEQ;AAAvB,SAAP;AACD,OAbD,MAaO;AACL,eAAO,EAAE,GAAGT,KAAL;AAAYC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBC,MAAM,CAACM,OAA5B;AAAvB,SAAP;AACD;;AAEH,SAAKV,sBAAL;AACE,UAAIW,QAAQ,GAAGT,KAAK,CAACC,SAAN,CAAgBc,MAAhB,CACZC,QAAD,IAAcA,QAAQ,CAACT,GAAT,KAAiBL,MAAM,CAACM,OAAP,CAAeD,GADjC,CAAf;AAGA,aAAO,EACL,GAAGP,KADE;AAELC,QAAAA,SAAS,EAAEQ;AAFN,OAAP;;AAKF,SAAKb,yBAAL;AACE,UAAIqB,eAAe,GAAGjB,KAAK,CAACC,SAAN,CAAgBI,IAAhB,CACnBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUL,MAAM,CAACM,OAAP,CAAeD,GADZ,CAAtB;;AAIA,UAAIU,eAAJ,EAAqB;AACnB,YAAIR,QAAQ,GAAGT,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAqBT,SAAD,IAAe;AAChD,cAAIA,SAAS,CAACM,GAAV,KAAkBL,MAAM,CAACM,OAAP,CAAeD,GAArC,EAA0C;AACxC,mBAAOM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,eAAlB,EAAmC;AACxCN,cAAAA,QAAQ,EAAGM,eAAe,CAACN,QAAhB,GAA2BT,MAAM,CAACM,OAAP,CAAeG;AADb,aAAnC,CAAP;AAGD;;AACD,iBAAOV,SAAP;AACD,SAPc,CAAf;AASA,eAAO,EAAE,GAAGD,KAAL;AAAYC,UAAAA,SAAS,EAAEQ;AAAvB,SAAP;AACD,OAXD,MAWO;AACL,eAAO,EAAE,GAAGT,KAAL;AAAYC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBC,MAAM,CAACM,OAA5B;AAAvB,SAAP;AACD;;AAEH,SAAKX,UAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AAEF;AACE,aAAOD,KAAP;AAtDJ;AAwDD,CAzDM","sourcesContent":["import {\r\n  ADD_TO_CART,\r\n  CHANGE_CART_ITEM_QUANTITY,\r\n  EMPTY_CART,\r\n  REMOVE_FROM_CART_BY_ID,\r\n} from \"../constants/cartConstants\";\r\n\r\nexport const cartReducer = (state = { cartItems: [] }, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      let addedItem = state.cartItems.find((c) => c._id === action.payload._id);\r\n\r\n      if (addedItem) {\r\n        let newState = state.cartItems.map((cartItems) => {\r\n          if (cartItems.quantity === cartItems.countInStock) {\r\n            return cartItems;\r\n          }\r\n          if (cartItems._id === action.payload._id) {\r\n            return Object.assign({}, addedItem, {\r\n              quantity: addedItem.quantity + 1,\r\n            });\r\n          }\r\n          return cartItems;\r\n        });\r\n        return { ...state, cartItems: newState };\r\n      } else {\r\n        return { ...state, cartItems: [...state.cartItems, action.payload] };\r\n      }\r\n\r\n    case REMOVE_FROM_CART_BY_ID:\r\n      let newState = state.cartItems.filter(\r\n        (cartItem) => cartItem._id !== action.payload._id\r\n      );\r\n      return {\r\n        ...state,\r\n        cartItems: newState,\r\n      };\r\n\r\n    case CHANGE_CART_ITEM_QUANTITY:\r\n      let changeAddedItem = state.cartItems.find(\r\n        (c) => c._id === action.payload._id\r\n      );\r\n\r\n      if (changeAddedItem) {\r\n        let newState = state.cartItems.map((cartItems) => {\r\n          if (cartItems._id === action.payload._id) {\r\n            return Object.assign({}, changeAddedItem, {\r\n              quantity: (changeAddedItem.quantity = action.payload.quantity),\r\n            });\r\n          }\r\n          return cartItems;\r\n        });\r\n\r\n        return { ...state, cartItems: newState };\r\n      } else {\r\n        return { ...state, cartItems: [...state.cartItems, action.payload] };\r\n      }\r\n\r\n    case EMPTY_CART:\r\n      return { ...state, cartItems: [] };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}